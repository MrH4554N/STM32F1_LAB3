
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae0  08002ae0  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae0  08002ae0  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae0  08002ae0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000054  08002b3c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002b3c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098d0  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf7  00000000  00000000  0002994d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eda  00000000  00000000  0002c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf68  00000000  00000000  00043772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082469  00000000  00000000  0004f6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000d1b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa4 	.word	0x08002aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002aa4 	.word	0x08002aa4

0800014c <getbuttoninput>:
int buttonFlag3 = 0;

//int buttonHoldFlag1 = 0;
//int buttonHoldFlag2 = 0;
//int buttonHoldFlag3 = 0;
void getbuttoninput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	//BUTTON 1
	button1_temp0 = button1_temp1;
 8000150:	4b60      	ldr	r3, [pc, #384]	; (80002d4 <getbuttoninput+0x188>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a60      	ldr	r2, [pc, #384]	; (80002d8 <getbuttoninput+0x18c>)
 8000156:	6013      	str	r3, [r2, #0]
	button1_temp1 = button1_temp2;
 8000158:	4b60      	ldr	r3, [pc, #384]	; (80002dc <getbuttoninput+0x190>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a5d      	ldr	r2, [pc, #372]	; (80002d4 <getbuttoninput+0x188>)
 800015e:	6013      	str	r3, [r2, #0]
	button1_temp2 = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 8000160:	2101      	movs	r1, #1
 8000162:	485f      	ldr	r0, [pc, #380]	; (80002e0 <getbuttoninput+0x194>)
 8000164:	f001 fc72 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b5b      	ldr	r3, [pc, #364]	; (80002dc <getbuttoninput+0x190>)
 800016e:	601a      	str	r2, [r3, #0]

	button2_temp0 = button2_temp1;
 8000170:	4b5c      	ldr	r3, [pc, #368]	; (80002e4 <getbuttoninput+0x198>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a5c      	ldr	r2, [pc, #368]	; (80002e8 <getbuttoninput+0x19c>)
 8000176:	6013      	str	r3, [r2, #0]
	button2_temp1 = button2_temp2;
 8000178:	4b5c      	ldr	r3, [pc, #368]	; (80002ec <getbuttoninput+0x1a0>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a59      	ldr	r2, [pc, #356]	; (80002e4 <getbuttoninput+0x198>)
 800017e:	6013      	str	r3, [r2, #0]
	button2_temp2 = HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin);
 8000180:	2102      	movs	r1, #2
 8000182:	4857      	ldr	r0, [pc, #348]	; (80002e0 <getbuttoninput+0x194>)
 8000184:	f001 fc62 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b57      	ldr	r3, [pc, #348]	; (80002ec <getbuttoninput+0x1a0>)
 800018e:	601a      	str	r2, [r3, #0]

	if((button1_temp0 == button1_temp1) && (button1_temp1 == button1_temp2)){
 8000190:	4b51      	ldr	r3, [pc, #324]	; (80002d8 <getbuttoninput+0x18c>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b4f      	ldr	r3, [pc, #316]	; (80002d4 <getbuttoninput+0x188>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	429a      	cmp	r2, r3
 800019a:	d129      	bne.n	80001f0 <getbuttoninput+0xa4>
 800019c:	4b4d      	ldr	r3, [pc, #308]	; (80002d4 <getbuttoninput+0x188>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	4b4e      	ldr	r3, [pc, #312]	; (80002dc <getbuttoninput+0x190>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d123      	bne.n	80001f0 <getbuttoninput+0xa4>
		if(button1_temp3 != button1_temp2){
 80001a8:	4b51      	ldr	r3, [pc, #324]	; (80002f0 <getbuttoninput+0x1a4>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	4b4b      	ldr	r3, [pc, #300]	; (80002dc <getbuttoninput+0x190>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d00e      	beq.n	80001d2 <getbuttoninput+0x86>
			button1_temp3 = button1_temp2;
 80001b4:	4b49      	ldr	r3, [pc, #292]	; (80002dc <getbuttoninput+0x190>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a4d      	ldr	r2, [pc, #308]	; (80002f0 <getbuttoninput+0x1a4>)
 80001ba:	6013      	str	r3, [r2, #0]
			if(button1_temp2 == PRESS_STATE){
 80001bc:	4b47      	ldr	r3, [pc, #284]	; (80002dc <getbuttoninput+0x190>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d115      	bne.n	80001f0 <getbuttoninput+0xa4>
				buttonFlag1 = 1;
 80001c4:	4b4b      	ldr	r3, [pc, #300]	; (80002f4 <getbuttoninput+0x1a8>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	601a      	str	r2, [r3, #0]
//				setTimer(7, timeHold);
				timePress = 200;
 80001ca:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <getbuttoninput+0x1ac>)
 80001cc:	22c8      	movs	r2, #200	; 0xc8
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	e00e      	b.n	80001f0 <getbuttoninput+0xa4>
			}
		}
		else{
			timePress--;
 80001d2:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <getbuttoninput+0x1ac>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	3b01      	subs	r3, #1
 80001d8:	4a47      	ldr	r2, [pc, #284]	; (80002f8 <getbuttoninput+0x1ac>)
 80001da:	6013      	str	r3, [r2, #0]
			if(timePress <= 0){
 80001dc:	4b46      	ldr	r3, [pc, #280]	; (80002f8 <getbuttoninput+0x1ac>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	dc05      	bgt.n	80001f0 <getbuttoninput+0xa4>
				button1_temp3 = NORMAL_STATE;
 80001e4:	4b42      	ldr	r3, [pc, #264]	; (80002f0 <getbuttoninput+0x1a4>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]
				timePress = 200;
 80001ea:	4b43      	ldr	r3, [pc, #268]	; (80002f8 <getbuttoninput+0x1ac>)
 80001ec:	22c8      	movs	r2, #200	; 0xc8
 80001ee:	601a      	str	r2, [r3, #0]
//			button1_temp3 = NORMAL_STATE;
//			timePress = 200;
//		}
	//BUTTON 2

	if((button2_temp0 == button2_temp1) && (button2_temp1 == button2_temp2)){
 80001f0:	4b3d      	ldr	r3, [pc, #244]	; (80002e8 <getbuttoninput+0x19c>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b3b      	ldr	r3, [pc, #236]	; (80002e4 <getbuttoninput+0x198>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d129      	bne.n	8000250 <getbuttoninput+0x104>
 80001fc:	4b39      	ldr	r3, [pc, #228]	; (80002e4 <getbuttoninput+0x198>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b3a      	ldr	r3, [pc, #232]	; (80002ec <getbuttoninput+0x1a0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	429a      	cmp	r2, r3
 8000206:	d123      	bne.n	8000250 <getbuttoninput+0x104>
		if(button2_temp3 != button2_temp2){
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <getbuttoninput+0x1b0>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b37      	ldr	r3, [pc, #220]	; (80002ec <getbuttoninput+0x1a0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	429a      	cmp	r2, r3
 8000212:	d00e      	beq.n	8000232 <getbuttoninput+0xe6>
			button2_temp3 = button2_temp2;
 8000214:	4b35      	ldr	r3, [pc, #212]	; (80002ec <getbuttoninput+0x1a0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a38      	ldr	r2, [pc, #224]	; (80002fc <getbuttoninput+0x1b0>)
 800021a:	6013      	str	r3, [r2, #0]
			if(button2_temp2 == PRESS_STATE){
 800021c:	4b33      	ldr	r3, [pc, #204]	; (80002ec <getbuttoninput+0x1a0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <getbuttoninput+0x104>
				buttonFlag2 = 1;
 8000224:	4b36      	ldr	r3, [pc, #216]	; (8000300 <getbuttoninput+0x1b4>)
 8000226:	2201      	movs	r2, #1
 8000228:	601a      	str	r2, [r3, #0]
//				setTimer(7, timeHold);
				timePress = 200;
 800022a:	4b33      	ldr	r3, [pc, #204]	; (80002f8 <getbuttoninput+0x1ac>)
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	e00e      	b.n	8000250 <getbuttoninput+0x104>
			}
		}
		else{
			timePress--;
 8000232:	4b31      	ldr	r3, [pc, #196]	; (80002f8 <getbuttoninput+0x1ac>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	3b01      	subs	r3, #1
 8000238:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <getbuttoninput+0x1ac>)
 800023a:	6013      	str	r3, [r2, #0]
			if(timePress <= 0){
 800023c:	4b2e      	ldr	r3, [pc, #184]	; (80002f8 <getbuttoninput+0x1ac>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	dc05      	bgt.n	8000250 <getbuttoninput+0x104>
				button2_temp3 = NORMAL_STATE;
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <getbuttoninput+0x1b0>)
 8000246:	2201      	movs	r2, #1
 8000248:	601a      	str	r2, [r3, #0]
				timePress = 200;
 800024a:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <getbuttoninput+0x1ac>)
 800024c:	22c8      	movs	r2, #200	; 0xc8
 800024e:	601a      	str	r2, [r3, #0]
//			if(timePress <= 0){
//				button2_temp3 = NORMAL_STATE;
//				timePress = 200;
//		}
	//BUTTON 3
	button3_temp0 = button3_temp1;
 8000250:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <getbuttoninput+0x1b8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2c      	ldr	r2, [pc, #176]	; (8000308 <getbuttoninput+0x1bc>)
 8000256:	6013      	str	r3, [r2, #0]
	button3_temp1 = button3_temp2;
 8000258:	4b2c      	ldr	r3, [pc, #176]	; (800030c <getbuttoninput+0x1c0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <getbuttoninput+0x1b8>)
 800025e:	6013      	str	r3, [r2, #0]
	button3_temp2 = HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin);
 8000260:	2104      	movs	r1, #4
 8000262:	481f      	ldr	r0, [pc, #124]	; (80002e0 <getbuttoninput+0x194>)
 8000264:	f001 fbf2 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <getbuttoninput+0x1c0>)
 800026e:	601a      	str	r2, [r3, #0]
	if((button3_temp0 == button3_temp1) && (button3_temp1 == button3_temp2)){
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <getbuttoninput+0x1bc>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <getbuttoninput+0x1b8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	429a      	cmp	r2, r3
 800027a:	d129      	bne.n	80002d0 <getbuttoninput+0x184>
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <getbuttoninput+0x1b8>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b22      	ldr	r3, [pc, #136]	; (800030c <getbuttoninput+0x1c0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	429a      	cmp	r2, r3
 8000286:	d123      	bne.n	80002d0 <getbuttoninput+0x184>
		if(button3_temp3 != button3_temp2){
 8000288:	4b21      	ldr	r3, [pc, #132]	; (8000310 <getbuttoninput+0x1c4>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b1f      	ldr	r3, [pc, #124]	; (800030c <getbuttoninput+0x1c0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	d00e      	beq.n	80002b2 <getbuttoninput+0x166>
			button3_temp3 = button3_temp2;
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <getbuttoninput+0x1c0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1d      	ldr	r2, [pc, #116]	; (8000310 <getbuttoninput+0x1c4>)
 800029a:	6013      	str	r3, [r2, #0]
			if(button3_temp2 == PRESS_STATE){
 800029c:	4b1b      	ldr	r3, [pc, #108]	; (800030c <getbuttoninput+0x1c0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d115      	bne.n	80002d0 <getbuttoninput+0x184>
				buttonFlag3 = 1;
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <getbuttoninput+0x1c8>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
				//setTimer(7, timeHold);
				timePress = 200;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <getbuttoninput+0x1ac>)
 80002ac:	22c8      	movs	r2, #200	; 0xc8
 80002ae:	601a      	str	r2, [r3, #0]
				button3_temp3 = NORMAL_STATE;
				timePress = 200;
			}
		}
	}
}
 80002b0:	e00e      	b.n	80002d0 <getbuttoninput+0x184>
			timePress--;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <getbuttoninput+0x1ac>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a0f      	ldr	r2, [pc, #60]	; (80002f8 <getbuttoninput+0x1ac>)
 80002ba:	6013      	str	r3, [r2, #0]
			if(timePress <= 0){
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <getbuttoninput+0x1ac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	dc05      	bgt.n	80002d0 <getbuttoninput+0x184>
				button3_temp3 = NORMAL_STATE;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <getbuttoninput+0x1c4>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
				timePress = 200;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <getbuttoninput+0x1ac>)
 80002cc:	22c8      	movs	r2, #200	; 0xc8
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000008 	.word	0x20000008
 80002e0:	40010c00 	.word	0x40010c00
 80002e4:	20000014 	.word	0x20000014
 80002e8:	20000010 	.word	0x20000010
 80002ec:	20000018 	.word	0x20000018
 80002f0:	2000000c 	.word	0x2000000c
 80002f4:	20000074 	.word	0x20000074
 80002f8:	20000070 	.word	0x20000070
 80002fc:	2000001c 	.word	0x2000001c
 8000300:	20000078 	.word	0x20000078
 8000304:	20000024 	.word	0x20000024
 8000308:	20000020 	.word	0x20000020
 800030c:	20000028 	.word	0x20000028
 8000310:	2000002c 	.word	0x2000002c
 8000314:	2000007c 	.word	0x2000007c

08000318 <isButtonPress1>:
//				if(timePress <= 0){
//					button3_temp3 = NORMAL_STATE;
//					timePress = 200;
//			}
//}
int isButtonPress1(){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	if(buttonFlag1 == 1){
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <isButtonPress1+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d104      	bne.n	800032e <isButtonPress1+0x16>
		buttonFlag1 = 0;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <isButtonPress1+0x20>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <isButtonPress1+0x18>
	}
	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	20000074 	.word	0x20000074

0800033c <isButtonPress2>:
int isButtonPress2(){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	if(buttonFlag2 == 1){
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <isButtonPress2+0x20>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d104      	bne.n	8000352 <isButtonPress2+0x16>
		buttonFlag2 =0;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <isButtonPress2+0x20>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		return 1;
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <isButtonPress2+0x18>
	}
	return 0;
 8000352:	2300      	movs	r3, #0
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000078 	.word	0x20000078

08000360 <isButtonPress3>:
int isButtonPress3(){
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	if(buttonFlag3 == 1){
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <isButtonPress3+0x20>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d104      	bne.n	8000376 <isButtonPress3+0x16>
		buttonFlag3 = 0;
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <isButtonPress3+0x20>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
		return 1;
 8000372:	2301      	movs	r3, #1
 8000374:	e000      	b.n	8000378 <isButtonPress3+0x18>
	}
	return 0;
 8000376:	2300      	movs	r3, #0
}
 8000378:	4618      	mov	r0, r3
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	2000007c 	.word	0x2000007c

08000384 <Runfsm_Auto>:
#include "fsm_auto.h"

int count0 = 0;
int count1= 0;

void Runfsm_Auto(){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if(Manual == 1) return;
 8000388:	4ba1      	ldr	r3, [pc, #644]	; (8000610 <Runfsm_Auto+0x28c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	f000 81e2 	beq.w	8000756 <Runfsm_Auto+0x3d2>
	if(Setting == 1) return;
 8000392:	4ba0      	ldr	r3, [pc, #640]	; (8000614 <Runfsm_Auto+0x290>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	f000 81df 	beq.w	800075a <Runfsm_Auto+0x3d6>
	switch (AUTOLINE1){
 800039c:	4b9e      	ldr	r3, [pc, #632]	; (8000618 <Runfsm_Auto+0x294>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	f200 80f2 	bhi.w	800058a <Runfsm_Auto+0x206>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <Runfsm_Auto+0x28>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	0800046b 	.word	0x0800046b
 80003b4:	0800052b 	.word	0x0800052b
 80003b8:	080004cb 	.word	0x080004cb
		case initAuto:
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	4896      	ldr	r0, [pc, #600]	; (800061c <Runfsm_Auto+0x298>)
 80003c2:	f001 fb5a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	4894      	ldr	r0, [pc, #592]	; (800061c <Runfsm_Auto+0x298>)
 80003cc:	f001 fb55 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4891      	ldr	r0, [pc, #580]	; (800061c <Runfsm_Auto+0x298>)
 80003d8:	f001 fb4f 	bl	8001a7a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2102      	movs	r1, #2
 80003e0:	488e      	ldr	r0, [pc, #568]	; (800061c <Runfsm_Auto+0x298>)
 80003e2:	f001 fb4a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2104      	movs	r1, #4
 80003ea:	488c      	ldr	r0, [pc, #560]	; (800061c <Runfsm_Auto+0x298>)
 80003ec:	f001 fb45 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2108      	movs	r1, #8
 80003f4:	4889      	ldr	r0, [pc, #548]	; (800061c <Runfsm_Auto+0x298>)
 80003f6:	f001 fb40 	bl	8001a7a <HAL_GPIO_WritePin>

			AUTOLINE1 = red;
 80003fa:	4b87      	ldr	r3, [pc, #540]	; (8000618 <Runfsm_Auto+0x294>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	601a      	str	r2, [r3, #0]
			count0 = Redtime/1000;
 8000400:	4b87      	ldr	r3, [pc, #540]	; (8000620 <Runfsm_Auto+0x29c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a87      	ldr	r2, [pc, #540]	; (8000624 <Runfsm_Auto+0x2a0>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1192      	asrs	r2, r2, #6
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a85      	ldr	r2, [pc, #532]	; (8000628 <Runfsm_Auto+0x2a4>)
 8000412:	6013      	str	r3, [r2, #0]

			AUTOLINE2 = green;
 8000414:	4b85      	ldr	r3, [pc, #532]	; (800062c <Runfsm_Auto+0x2a8>)
 8000416:	2203      	movs	r2, #3
 8000418:	601a      	str	r2, [r3, #0]
			count1 = Greentime/1000;
 800041a:	4b85      	ldr	r3, [pc, #532]	; (8000630 <Runfsm_Auto+0x2ac>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a81      	ldr	r2, [pc, #516]	; (8000624 <Runfsm_Auto+0x2a0>)
 8000420:	fb82 1203 	smull	r1, r2, r2, r3
 8000424:	1192      	asrs	r2, r2, #6
 8000426:	17db      	asrs	r3, r3, #31
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	4a82      	ldr	r2, [pc, #520]	; (8000634 <Runfsm_Auto+0x2b0>)
 800042c:	6013      	str	r3, [r2, #0]

			updateClockBuffer(count0, count1);
 800042e:	4b7e      	ldr	r3, [pc, #504]	; (8000628 <Runfsm_Auto+0x2a4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a80      	ldr	r2, [pc, #512]	; (8000634 <Runfsm_Auto+0x2b0>)
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fdcb 	bl	8000fd4 <updateClockBuffer>

			setTimer(0, Redtime);
 800043e:	4b78      	ldr	r3, [pc, #480]	; (8000620 <Runfsm_Auto+0x29c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4619      	mov	r1, r3
 8000444:	2000      	movs	r0, #0
 8000446:	f000 ffab 	bl	80013a0 <setTimer>
			setTimer(1, Greentime);
 800044a:	4b79      	ldr	r3, [pc, #484]	; (8000630 <Runfsm_Auto+0x2ac>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4619      	mov	r1, r3
 8000450:	2001      	movs	r0, #1
 8000452:	f000 ffa5 	bl	80013a0 <setTimer>
			setTimer(2, 1000);
 8000456:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800045a:	2002      	movs	r0, #2
 800045c:	f000 ffa0 	bl	80013a0 <setTimer>
			setTimer(3, 250);
 8000460:	21fa      	movs	r1, #250	; 0xfa
 8000462:	2003      	movs	r0, #3
 8000464:	f000 ff9c 	bl	80013a0 <setTimer>
			return;
 8000468:	e178      	b.n	800075c <Runfsm_Auto+0x3d8>
		case red:
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	486b      	ldr	r0, [pc, #428]	; (800061c <Runfsm_Auto+0x298>)
 8000470:	f001 fb03 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	4868      	ldr	r0, [pc, #416]	; (800061c <Runfsm_Auto+0x298>)
 800047a:	f001 fafe 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000484:	4865      	ldr	r0, [pc, #404]	; (800061c <Runfsm_Auto+0x298>)
 8000486:	f001 faf8 	bl	8001a7a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 800048a:	4b6b      	ldr	r3, [pc, #428]	; (8000638 <Runfsm_Auto+0x2b4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d17d      	bne.n	800058e <Runfsm_Auto+0x20a>
				AUTOLINE1 = green;
 8000492:	4b61      	ldr	r3, [pc, #388]	; (8000618 <Runfsm_Auto+0x294>)
 8000494:	2203      	movs	r2, #3
 8000496:	601a      	str	r2, [r3, #0]
				count0 = Greentime/1000;
 8000498:	4b65      	ldr	r3, [pc, #404]	; (8000630 <Runfsm_Auto+0x2ac>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a61      	ldr	r2, [pc, #388]	; (8000624 <Runfsm_Auto+0x2a0>)
 800049e:	fb82 1203 	smull	r1, r2, r2, r3
 80004a2:	1192      	asrs	r2, r2, #6
 80004a4:	17db      	asrs	r3, r3, #31
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	4a5f      	ldr	r2, [pc, #380]	; (8000628 <Runfsm_Auto+0x2a4>)
 80004aa:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 80004ac:	4b5e      	ldr	r3, [pc, #376]	; (8000628 <Runfsm_Auto+0x2a4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a60      	ldr	r2, [pc, #384]	; (8000634 <Runfsm_Auto+0x2b0>)
 80004b2:	6812      	ldr	r2, [r2, #0]
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 fd8c 	bl	8000fd4 <updateClockBuffer>
				setTimer(0, Greentime);
 80004bc:	4b5c      	ldr	r3, [pc, #368]	; (8000630 <Runfsm_Auto+0x2ac>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4619      	mov	r1, r3
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 ff6c 	bl	80013a0 <setTimer>
			}
			break;
 80004c8:	e061      	b.n	800058e <Runfsm_Auto+0x20a>
		case green:
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2140      	movs	r1, #64	; 0x40
 80004ce:	4853      	ldr	r0, [pc, #332]	; (800061c <Runfsm_Auto+0x298>)
 80004d0:	f001 fad3 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	4850      	ldr	r0, [pc, #320]	; (800061c <Runfsm_Auto+0x298>)
 80004da:	f001 face 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e4:	484d      	ldr	r0, [pc, #308]	; (800061c <Runfsm_Auto+0x298>)
 80004e6:	f001 fac8 	bl	8001a7a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 80004ea:	4b53      	ldr	r3, [pc, #332]	; (8000638 <Runfsm_Auto+0x2b4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d14f      	bne.n	8000592 <Runfsm_Auto+0x20e>
				AUTOLINE1 = yellow;
 80004f2:	4b49      	ldr	r3, [pc, #292]	; (8000618 <Runfsm_Auto+0x294>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
				count0 = Yellowtime/1000;
 80004f8:	4b50      	ldr	r3, [pc, #320]	; (800063c <Runfsm_Auto+0x2b8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a49      	ldr	r2, [pc, #292]	; (8000624 <Runfsm_Auto+0x2a0>)
 80004fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000502:	1192      	asrs	r2, r2, #6
 8000504:	17db      	asrs	r3, r3, #31
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	4a47      	ldr	r2, [pc, #284]	; (8000628 <Runfsm_Auto+0x2a4>)
 800050a:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 800050c:	4b46      	ldr	r3, [pc, #280]	; (8000628 <Runfsm_Auto+0x2a4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a48      	ldr	r2, [pc, #288]	; (8000634 <Runfsm_Auto+0x2b0>)
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fd5c 	bl	8000fd4 <updateClockBuffer>
				setTimer(0, Yellowtime);
 800051c:	4b47      	ldr	r3, [pc, #284]	; (800063c <Runfsm_Auto+0x2b8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f000 ff3c 	bl	80013a0 <setTimer>
			}
			break;
 8000528:	e033      	b.n	8000592 <Runfsm_Auto+0x20e>
		case yellow:
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	483b      	ldr	r0, [pc, #236]	; (800061c <Runfsm_Auto+0x298>)
 8000530:	f001 faa3 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4838      	ldr	r0, [pc, #224]	; (800061c <Runfsm_Auto+0x298>)
 800053a:	f001 fa9e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	4835      	ldr	r0, [pc, #212]	; (800061c <Runfsm_Auto+0x298>)
 8000546:	f001 fa98 	bl	8001a7a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 800054a:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <Runfsm_Auto+0x2b4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d121      	bne.n	8000596 <Runfsm_Auto+0x212>
				AUTOLINE1 = red;
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <Runfsm_Auto+0x294>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
				count0 = Redtime/1000;
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <Runfsm_Auto+0x29c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a31      	ldr	r2, [pc, #196]	; (8000624 <Runfsm_Auto+0x2a0>)
 800055e:	fb82 1203 	smull	r1, r2, r2, r3
 8000562:	1192      	asrs	r2, r2, #6
 8000564:	17db      	asrs	r3, r3, #31
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	4a2f      	ldr	r2, [pc, #188]	; (8000628 <Runfsm_Auto+0x2a4>)
 800056a:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 800056c:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <Runfsm_Auto+0x2a4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a30      	ldr	r2, [pc, #192]	; (8000634 <Runfsm_Auto+0x2b0>)
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fd2c 	bl	8000fd4 <updateClockBuffer>
				setTimer(0, Redtime);
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <Runfsm_Auto+0x29c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	2000      	movs	r0, #0
 8000584:	f000 ff0c 	bl	80013a0 <setTimer>
			}
			break;
 8000588:	e005      	b.n	8000596 <Runfsm_Auto+0x212>
		default:
			break;
 800058a:	bf00      	nop
 800058c:	e004      	b.n	8000598 <Runfsm_Auto+0x214>
			break;
 800058e:	bf00      	nop
 8000590:	e002      	b.n	8000598 <Runfsm_Auto+0x214>
			break;
 8000592:	bf00      	nop
 8000594:	e000      	b.n	8000598 <Runfsm_Auto+0x214>
			break;
 8000596:	bf00      	nop
	}
	switch (AUTOLINE2) {  // LINE 2
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <Runfsm_Auto+0x2a8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d04f      	beq.n	8000640 <Runfsm_Auto+0x2bc>
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	f300 80ab 	bgt.w	80006fc <Runfsm_Auto+0x378>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d002      	beq.n	80005b0 <Runfsm_Auto+0x22c>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d077      	beq.n	800069e <Runfsm_Auto+0x31a>
				updateClockBuffer(count0, count1);
				setTimer(1, Redtime);
			}
			break;
		default:
			break;
 80005ae:	e0a5      	b.n	80006fc <Runfsm_Auto+0x378>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2102      	movs	r1, #2
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <Runfsm_Auto+0x298>)
 80005b6:	f001 fa60 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2104      	movs	r1, #4
 80005be:	4817      	ldr	r0, [pc, #92]	; (800061c <Runfsm_Auto+0x298>)
 80005c0:	f001 fa5b 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2108      	movs	r1, #8
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <Runfsm_Auto+0x298>)
 80005ca:	f001 fa56 	bl	8001a7a <HAL_GPIO_WritePin>
			if(timer_flag[1] == 1){
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <Runfsm_Auto+0x2b4>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	f040 8094 	bne.w	8000700 <Runfsm_Auto+0x37c>
				AUTOLINE2 = green;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <Runfsm_Auto+0x2a8>)
 80005da:	2203      	movs	r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
				count1 = Greentime/1000;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <Runfsm_Auto+0x2ac>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <Runfsm_Auto+0x2a0>)
 80005e4:	fb82 1203 	smull	r1, r2, r2, r3
 80005e8:	1192      	asrs	r2, r2, #6
 80005ea:	17db      	asrs	r3, r3, #31
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <Runfsm_Auto+0x2b0>)
 80005f0:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <Runfsm_Auto+0x2a4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <Runfsm_Auto+0x2b0>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fce9 	bl	8000fd4 <updateClockBuffer>
				setTimer(1, Greentime);
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <Runfsm_Auto+0x2ac>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fec9 	bl	80013a0 <setTimer>
			break;
 800060e:	e077      	b.n	8000700 <Runfsm_Auto+0x37c>
 8000610:	20000094 	.word	0x20000094
 8000614:	20000090 	.word	0x20000090
 8000618:	20000088 	.word	0x20000088
 800061c:	40010800 	.word	0x40010800
 8000620:	20000038 	.word	0x20000038
 8000624:	10624dd3 	.word	0x10624dd3
 8000628:	20000080 	.word	0x20000080
 800062c:	2000008c 	.word	0x2000008c
 8000630:	20000040 	.word	0x20000040
 8000634:	20000084 	.word	0x20000084
 8000638:	2000011c 	.word	0x2000011c
 800063c:	2000003c 	.word	0x2000003c
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	4846      	ldr	r0, [pc, #280]	; (8000760 <Runfsm_Auto+0x3dc>)
 8000646:	f001 fa18 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4844      	ldr	r0, [pc, #272]	; (8000760 <Runfsm_Auto+0x3dc>)
 8000650:	f001 fa13 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	4841      	ldr	r0, [pc, #260]	; (8000760 <Runfsm_Auto+0x3dc>)
 800065a:	f001 fa0e 	bl	8001a7a <HAL_GPIO_WritePin>
			if(timer_flag[1] == 1){
 800065e:	4b41      	ldr	r3, [pc, #260]	; (8000764 <Runfsm_Auto+0x3e0>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d14e      	bne.n	8000704 <Runfsm_Auto+0x380>
				AUTOLINE2 = yellow;
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <Runfsm_Auto+0x3e4>)
 8000668:	2202      	movs	r2, #2
 800066a:	601a      	str	r2, [r3, #0]
				count1 = Yellowtime/1000;
 800066c:	4b3f      	ldr	r3, [pc, #252]	; (800076c <Runfsm_Auto+0x3e8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3f      	ldr	r2, [pc, #252]	; (8000770 <Runfsm_Auto+0x3ec>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1192      	asrs	r2, r2, #6
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4a3d      	ldr	r2, [pc, #244]	; (8000774 <Runfsm_Auto+0x3f0>)
 800067e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <Runfsm_Auto+0x3f4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a3b      	ldr	r2, [pc, #236]	; (8000774 <Runfsm_Auto+0x3f0>)
 8000686:	6812      	ldr	r2, [r2, #0]
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fca2 	bl	8000fd4 <updateClockBuffer>
				setTimer(1, Yellowtime);
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <Runfsm_Auto+0x3e8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	2001      	movs	r0, #1
 8000698:	f000 fe82 	bl	80013a0 <setTimer>
			break;
 800069c:	e032      	b.n	8000704 <Runfsm_Auto+0x380>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	482f      	ldr	r0, [pc, #188]	; (8000760 <Runfsm_Auto+0x3dc>)
 80006a4:	f001 f9e9 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2104      	movs	r1, #4
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <Runfsm_Auto+0x3dc>)
 80006ae:	f001 f9e4 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	482a      	ldr	r0, [pc, #168]	; (8000760 <Runfsm_Auto+0x3dc>)
 80006b8:	f001 f9df 	bl	8001a7a <HAL_GPIO_WritePin>
			if(timer_flag[1] == 1){
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <Runfsm_Auto+0x3e0>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d121      	bne.n	8000708 <Runfsm_Auto+0x384>
				AUTOLINE2 = red;
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <Runfsm_Auto+0x3e4>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
				count1 = Redtime/1000;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <Runfsm_Auto+0x3f8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <Runfsm_Auto+0x3ec>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	1192      	asrs	r2, r2, #6
 80006d6:	17db      	asrs	r3, r3, #31
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <Runfsm_Auto+0x3f0>)
 80006dc:	6013      	str	r3, [r2, #0]
				updateClockBuffer(count0, count1);
 80006de:	4b26      	ldr	r3, [pc, #152]	; (8000778 <Runfsm_Auto+0x3f4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a24      	ldr	r2, [pc, #144]	; (8000774 <Runfsm_Auto+0x3f0>)
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fc73 	bl	8000fd4 <updateClockBuffer>
				setTimer(1, Redtime);
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <Runfsm_Auto+0x3f8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fe53 	bl	80013a0 <setTimer>
			break;
 80006fa:	e005      	b.n	8000708 <Runfsm_Auto+0x384>
			break;
 80006fc:	bf00      	nop
 80006fe:	e004      	b.n	800070a <Runfsm_Auto+0x386>
			break;
 8000700:	bf00      	nop
 8000702:	e002      	b.n	800070a <Runfsm_Auto+0x386>
			break;
 8000704:	bf00      	nop
 8000706:	e000      	b.n	800070a <Runfsm_Auto+0x386>
			break;
 8000708:	bf00      	nop
	}
	if(timer_flag[2] == 1){
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <Runfsm_Auto+0x3e0>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d116      	bne.n	8000740 <Runfsm_Auto+0x3bc>
		setTimer(2, 1000);
 8000712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000716:	2002      	movs	r0, #2
 8000718:	f000 fe42 	bl	80013a0 <setTimer>
		count0--; count1--;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <Runfsm_Auto+0x3f4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <Runfsm_Auto+0x3f4>)
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <Runfsm_Auto+0x3f0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3b01      	subs	r3, #1
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <Runfsm_Auto+0x3f0>)
 800072e:	6013      	str	r3, [r2, #0]
		updateClockBuffer(count0, count1);
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <Runfsm_Auto+0x3f4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <Runfsm_Auto+0x3f0>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc4a 	bl	8000fd4 <updateClockBuffer>
	}
	if(timer_flag[3] == 1){
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <Runfsm_Auto+0x3e0>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d109      	bne.n	800075c <Runfsm_Auto+0x3d8>
		setTimer(3, 250);
 8000748:	21fa      	movs	r1, #250	; 0xfa
 800074a:	2003      	movs	r0, #3
 800074c:	f000 fe28 	bl	80013a0 <setTimer>
		Scan7SEG();
 8000750:	f000 fa22 	bl	8000b98 <Scan7SEG>
 8000754:	e002      	b.n	800075c <Runfsm_Auto+0x3d8>
	if(Manual == 1) return;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <Runfsm_Auto+0x3d8>
	if(Setting == 1) return;
 800075a:	bf00      	nop
	}
}
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800
 8000764:	2000011c 	.word	0x2000011c
 8000768:	2000008c 	.word	0x2000008c
 800076c:	2000003c 	.word	0x2000003c
 8000770:	10624dd3 	.word	0x10624dd3
 8000774:	20000084 	.word	0x20000084
 8000778:	20000080 	.word	0x20000080
 800077c:	20000038 	.word	0x20000038

08000780 <Runfsm_Manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void Runfsm_Manual(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	if(Setting == 1) return;
 8000784:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <Runfsm_Manual+0x168>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	f000 80ab 	beq.w	80008e4 <Runfsm_Manual+0x164>

	if(Manual != 1){
 800078e:	4b57      	ldr	r3, [pc, #348]	; (80008ec <Runfsm_Manual+0x16c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d049      	beq.n	800082a <Runfsm_Manual+0xaa>
		if((isButtonPress3() == 1)){
 8000796:	f7ff fde3 	bl	8000360 <isButtonPress3>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d144      	bne.n	800082a <Runfsm_Manual+0xaa>
			Manual = 1;
 80007a0:	4b52      	ldr	r3, [pc, #328]	; (80008ec <Runfsm_Manual+0x16c>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
			AUTOLINE1 = -1;
 80007a6:	4b52      	ldr	r3, [pc, #328]	; (80008f0 <Runfsm_Manual+0x170>)
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	601a      	str	r2, [r3, #0]
			AUTOLINE2 = -1;
 80007ae:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <Runfsm_Manual+0x174>)
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	601a      	str	r2, [r3, #0]
			MANUAL = MANUAL_LINE1_GO;
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <Runfsm_Manual+0x178>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	484e      	ldr	r0, [pc, #312]	; (80008fc <Runfsm_Manual+0x17c>)
 80007c2:	f001 f95a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2102      	movs	r1, #2
 80007ca:	484c      	ldr	r0, [pc, #304]	; (80008fc <Runfsm_Manual+0x17c>)
 80007cc:	f001 f955 	bl	8001a7a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	4849      	ldr	r0, [pc, #292]	; (80008fc <Runfsm_Manual+0x17c>)
 80007d6:	f001 f950 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2104      	movs	r1, #4
 80007de:	4847      	ldr	r0, [pc, #284]	; (80008fc <Runfsm_Manual+0x17c>)
 80007e0:	f001 f94b 	bl	8001a7a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	4844      	ldr	r0, [pc, #272]	; (80008fc <Runfsm_Manual+0x17c>)
 80007ec:	f001 f945 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2108      	movs	r1, #8
 80007f4:	4841      	ldr	r0, [pc, #260]	; (80008fc <Runfsm_Manual+0x17c>)
 80007f6:	f001 f940 	bl	8001a7a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000800:	483e      	ldr	r0, [pc, #248]	; (80008fc <Runfsm_Manual+0x17c>)
 8000802:	f001 f93a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080c:	483b      	ldr	r0, [pc, #236]	; (80008fc <Runfsm_Manual+0x17c>)
 800080e:	f001 f934 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	4838      	ldr	r0, [pc, #224]	; (80008fc <Runfsm_Manual+0x17c>)
 800081a:	f001 f92e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4835      	ldr	r0, [pc, #212]	; (80008fc <Runfsm_Manual+0x17c>)
 8000826:	f001 f928 	bl	8001a7a <HAL_GPIO_WritePin>
		}
	}
	switch (MANUAL) {
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <Runfsm_Manual+0x178>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d002      	beq.n	8000838 <Runfsm_Manual+0xb8>
 8000832:	2b02      	cmp	r3, #2
 8000834:	d01e      	beq.n	8000874 <Runfsm_Manual+0xf4>
			if(isButtonPress3() == 1){
				MANUAL = MANUAL_LINE1_GO;
			}
			break;
		default:
			break;
 8000836:	e03e      	b.n	80008b6 <Runfsm_Manual+0x136>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <Runfsm_Manual+0x17c>)
 8000840:	f001 f91b 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2102      	movs	r1, #2
 8000848:	482c      	ldr	r0, [pc, #176]	; (80008fc <Runfsm_Manual+0x17c>)
 800084a:	f001 f916 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	482a      	ldr	r0, [pc, #168]	; (80008fc <Runfsm_Manual+0x17c>)
 8000854:	f001 f911 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4827      	ldr	r0, [pc, #156]	; (80008fc <Runfsm_Manual+0x17c>)
 800085e:	f001 f90c 	bl	8001a7a <HAL_GPIO_WritePin>
			if(isButtonPress3() == 1){
 8000862:	f7ff fd7d 	bl	8000360 <isButtonPress3>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d121      	bne.n	80008b0 <Runfsm_Manual+0x130>
				MANUAL = MANUAL_LINE2_GO;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <Runfsm_Manual+0x178>)
 800086e:	2202      	movs	r2, #2
 8000870:	601a      	str	r2, [r3, #0]
			break;
 8000872:	e01d      	b.n	80008b0 <Runfsm_Manual+0x130>
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	4820      	ldr	r0, [pc, #128]	; (80008fc <Runfsm_Manual+0x17c>)
 800087a:	f001 f8fe 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2108      	movs	r1, #8
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <Runfsm_Manual+0x17c>)
 8000884:	f001 f8f9 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	481b      	ldr	r0, [pc, #108]	; (80008fc <Runfsm_Manual+0x17c>)
 8000890:	f001 f8f3 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2102      	movs	r1, #2
 8000898:	4818      	ldr	r0, [pc, #96]	; (80008fc <Runfsm_Manual+0x17c>)
 800089a:	f001 f8ee 	bl	8001a7a <HAL_GPIO_WritePin>
			if(isButtonPress3() == 1){
 800089e:	f7ff fd5f 	bl	8000360 <isButtonPress3>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d105      	bne.n	80008b4 <Runfsm_Manual+0x134>
				MANUAL = MANUAL_LINE1_GO;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Runfsm_Manual+0x178>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
			break;
 80008ae:	e001      	b.n	80008b4 <Runfsm_Manual+0x134>
			break;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <Runfsm_Manual+0x136>
			break;
 80008b4:	bf00      	nop
	}

	if(Manual == 1){
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <Runfsm_Manual+0x16c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d113      	bne.n	80008e6 <Runfsm_Manual+0x166>
		if((isButtonPress1() == 1)){
 80008be:	f7ff fd2b 	bl	8000318 <isButtonPress1>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d10e      	bne.n	80008e6 <Runfsm_Manual+0x166>
			Manual = 0;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <Runfsm_Manual+0x16c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
			AUTOLINE1 = initAuto;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <Runfsm_Manual+0x170>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
			AUTOLINE2 = initAuto;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Runfsm_Manual+0x174>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
			MANUAL = -1;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <Runfsm_Manual+0x178>)
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e000      	b.n	80008e6 <Runfsm_Manual+0x166>
	if(Setting == 1) return;
 80008e4:	bf00      	nop
		}
	}

}
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000090 	.word	0x20000090
 80008ec:	20000094 	.word	0x20000094
 80008f0:	20000088 	.word	0x20000088
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000034 	.word	0x20000034
 80008fc:	40010800 	.word	0x40010800

08000900 <Runfsm_Setting>:
 *      Author: Admin
 */

#include "fsm_setting.h"

void Runfsm_Setting(){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	if(Manual == 1) return;
 8000904:	4b9a      	ldr	r3, [pc, #616]	; (8000b70 <Runfsm_Setting+0x270>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	f000 8127 	beq.w	8000b5c <Runfsm_Setting+0x25c>
	if(isButtonPress1() == 1){
 800090e:	f7ff fd03 	bl	8000318 <isButtonPress1>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d12a      	bne.n	800096e <Runfsm_Setting+0x6e>
		HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	4895      	ldr	r0, [pc, #596]	; (8000b74 <Runfsm_Setting+0x274>)
 800091e:	f001 f8ac 	bl	8001a7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	4893      	ldr	r0, [pc, #588]	; (8000b74 <Runfsm_Setting+0x274>)
 8000928:	f001 f8a7 	bl	8001a7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4890      	ldr	r0, [pc, #576]	; (8000b74 <Runfsm_Setting+0x274>)
 8000934:	f001 f8a1 	bl	8001a7a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	488d      	ldr	r0, [pc, #564]	; (8000b74 <Runfsm_Setting+0x274>)
 800093e:	f001 f89c 	bl	8001a7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	488b      	ldr	r0, [pc, #556]	; (8000b74 <Runfsm_Setting+0x274>)
 8000948:	f001 f897 	bl	8001a7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2108      	movs	r1, #8
 8000950:	4888      	ldr	r0, [pc, #544]	; (8000b74 <Runfsm_Setting+0x274>)
 8000952:	f001 f892 	bl	8001a7a <HAL_GPIO_WritePin>

		Setting = 1;
 8000956:	4b88      	ldr	r3, [pc, #544]	; (8000b78 <Runfsm_Setting+0x278>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fb38 	bl	8000fd4 <updateClockBuffer>
		SETTING++;
 8000964:	4b85      	ldr	r3, [pc, #532]	; (8000b7c <Runfsm_Setting+0x27c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a84      	ldr	r2, [pc, #528]	; (8000b7c <Runfsm_Setting+0x27c>)
 800096c:	6013      	str	r3, [r2, #0]
	}
	switch(SETTING){
 800096e:	4b83      	ldr	r3, [pc, #524]	; (8000b7c <Runfsm_Setting+0x27c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	f200 80f4 	bhi.w	8000b60 <Runfsm_Setting+0x260>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <Runfsm_Setting+0x80>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	08000995 	.word	0x08000995
 8000984:	080009fb 	.word	0x080009fb
 8000988:	08000a5f 	.word	0x08000a5f
 800098c:	08000ac1 	.word	0x08000ac1
 8000990:	08000b25 	.word	0x08000b25
		case initSetting:
			HAL_GPIO_WritePin(RED0_GPIO_Port, RED0_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4876      	ldr	r0, [pc, #472]	; (8000b74 <Runfsm_Setting+0x274>)
 800099a:	f001 f86e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW0_GPIO_Port, YELLOW0_Pin, RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	4874      	ldr	r0, [pc, #464]	; (8000b74 <Runfsm_Setting+0x274>)
 80009a4:	f001 f869 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN0_GPIO_Port, GREEN0_Pin, RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	4871      	ldr	r0, [pc, #452]	; (8000b74 <Runfsm_Setting+0x274>)
 80009b0:	f001 f863 	bl	8001a7a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2102      	movs	r1, #2
 80009b8:	486e      	ldr	r0, [pc, #440]	; (8000b74 <Runfsm_Setting+0x274>)
 80009ba:	f001 f85e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	486c      	ldr	r0, [pc, #432]	; (8000b74 <Runfsm_Setting+0x274>)
 80009c4:	f001 f859 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2108      	movs	r1, #8
 80009cc:	4869      	ldr	r0, [pc, #420]	; (8000b74 <Runfsm_Setting+0x274>)
 80009ce:	f001 f854 	bl	8001a7a <HAL_GPIO_WritePin>

			setTimer(3, 250);
 80009d2:	21fa      	movs	r1, #250	; 0xfa
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 fce3 	bl	80013a0 <setTimer>
			Redtime = 0;
 80009da:	4b69      	ldr	r3, [pc, #420]	; (8000b80 <Runfsm_Setting+0x280>)
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
			Yellowtime = 0;
 80009e0:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <Runfsm_Setting+0x284>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
			Greentime = 0;
 80009e6:	4b68      	ldr	r3, [pc, #416]	; (8000b88 <Runfsm_Setting+0x288>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			updateClockBuffer(0, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 faf0 	bl	8000fd4 <updateClockBuffer>
			SETTING = setRed;
 80009f4:	4b61      	ldr	r3, [pc, #388]	; (8000b7c <Runfsm_Setting+0x27c>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

		case setRed:
			if(isButtonPress2() == 1){
 80009fa:	f7ff fc9f 	bl	800033c <isButtonPress2>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d118      	bne.n	8000a36 <Runfsm_Setting+0x136>
				Redtime += 1000;
 8000a04:	4b5e      	ldr	r3, [pc, #376]	; (8000b80 <Runfsm_Setting+0x280>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a0c:	4a5c      	ldr	r2, [pc, #368]	; (8000b80 <Runfsm_Setting+0x280>)
 8000a0e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(Redtime/1000, Redtime/1000);
 8000a10:	4b5b      	ldr	r3, [pc, #364]	; (8000b80 <Runfsm_Setting+0x280>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000a16:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1a:	1192      	asrs	r2, r2, #6
 8000a1c:	17db      	asrs	r3, r3, #31
 8000a1e:	1ad0      	subs	r0, r2, r3
 8000a20:	4b57      	ldr	r3, [pc, #348]	; (8000b80 <Runfsm_Setting+0x280>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a59      	ldr	r2, [pc, #356]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000a26:	fb82 1203 	smull	r1, r2, r2, r3
 8000a2a:	1192      	asrs	r2, r2, #6
 8000a2c:	17db      	asrs	r3, r3, #31
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	f000 facf 	bl	8000fd4 <updateClockBuffer>
			}
			if(timer_flag[3] == 1){
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <Runfsm_Setting+0x290>)
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	f040 8092 	bne.w	8000b64 <Runfsm_Setting+0x264>
				Scan7SEG();
 8000a40:	f000 f8aa 	bl	8000b98 <Scan7SEG>
				HAL_GPIO_TogglePin(RED0_GPIO_Port, RED0_Pin);
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	484b      	ldr	r0, [pc, #300]	; (8000b74 <Runfsm_Setting+0x274>)
 8000a48:	f001 f82f 	bl	8001aaa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4849      	ldr	r0, [pc, #292]	; (8000b74 <Runfsm_Setting+0x274>)
 8000a50:	f001 f82b 	bl	8001aaa <HAL_GPIO_TogglePin>
				setTimer(3, 250);
 8000a54:	21fa      	movs	r1, #250	; 0xfa
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 fca2 	bl	80013a0 <setTimer>
			}
			break;
 8000a5c:	e082      	b.n	8000b64 <Runfsm_Setting+0x264>
		case setYellow:
			if(isButtonPress2() == 1){
 8000a5e:	f7ff fc6d 	bl	800033c <isButtonPress2>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d118      	bne.n	8000a9a <Runfsm_Setting+0x19a>
				Yellowtime += 1000;
 8000a68:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <Runfsm_Setting+0x284>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a70:	4a44      	ldr	r2, [pc, #272]	; (8000b84 <Runfsm_Setting+0x284>)
 8000a72:	6013      	str	r3, [r2, #0]
				updateClockBuffer(Yellowtime/1000, Yellowtime/1000);
 8000a74:	4b43      	ldr	r3, [pc, #268]	; (8000b84 <Runfsm_Setting+0x284>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a44      	ldr	r2, [pc, #272]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000a7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7e:	1192      	asrs	r2, r2, #6
 8000a80:	17db      	asrs	r3, r3, #31
 8000a82:	1ad0      	subs	r0, r2, r3
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <Runfsm_Setting+0x284>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a40      	ldr	r2, [pc, #256]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1192      	asrs	r2, r2, #6
 8000a90:	17db      	asrs	r3, r3, #31
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4619      	mov	r1, r3
 8000a96:	f000 fa9d 	bl	8000fd4 <updateClockBuffer>
			}
			if(timer_flag[3] == 1){
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <Runfsm_Setting+0x290>)
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d162      	bne.n	8000b68 <Runfsm_Setting+0x268>
				Scan7SEG();
 8000aa2:	f000 f879 	bl	8000b98 <Scan7SEG>
				HAL_GPIO_TogglePin(YELLOW0_GPIO_Port, YELLOW0_Pin);
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4832      	ldr	r0, [pc, #200]	; (8000b74 <Runfsm_Setting+0x274>)
 8000aaa:	f000 fffe 	bl	8001aaa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4830      	ldr	r0, [pc, #192]	; (8000b74 <Runfsm_Setting+0x274>)
 8000ab2:	f000 fffa 	bl	8001aaa <HAL_GPIO_TogglePin>
				setTimer(3, 250);
 8000ab6:	21fa      	movs	r1, #250	; 0xfa
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 fc71 	bl	80013a0 <setTimer>
			}
			break;
 8000abe:	e053      	b.n	8000b68 <Runfsm_Setting+0x268>
		case setGreen:
			if(isButtonPress2() == 1){
 8000ac0:	f7ff fc3c 	bl	800033c <isButtonPress2>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d118      	bne.n	8000afc <Runfsm_Setting+0x1fc>
				Greentime += 1000;
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <Runfsm_Setting+0x288>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ad2:	4a2d      	ldr	r2, [pc, #180]	; (8000b88 <Runfsm_Setting+0x288>)
 8000ad4:	6013      	str	r3, [r2, #0]
				updateClockBuffer(Greentime/1000, Greentime/1000);
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <Runfsm_Setting+0x288>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a2c      	ldr	r2, [pc, #176]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	1192      	asrs	r2, r2, #6
 8000ae2:	17db      	asrs	r3, r3, #31
 8000ae4:	1ad0      	subs	r0, r2, r3
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <Runfsm_Setting+0x288>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <Runfsm_Setting+0x28c>)
 8000aec:	fb82 1203 	smull	r1, r2, r2, r3
 8000af0:	1192      	asrs	r2, r2, #6
 8000af2:	17db      	asrs	r3, r3, #31
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	4619      	mov	r1, r3
 8000af8:	f000 fa6c 	bl	8000fd4 <updateClockBuffer>
			}
			if(timer_flag[3] == 1){
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <Runfsm_Setting+0x290>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d133      	bne.n	8000b6c <Runfsm_Setting+0x26c>
				Scan7SEG();
 8000b04:	f000 f848 	bl	8000b98 <Scan7SEG>
				HAL_GPIO_TogglePin(GREEN0_GPIO_Port, GREEN0_Pin);
 8000b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <Runfsm_Setting+0x274>)
 8000b0e:	f000 ffcc 	bl	8001aaa <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000b12:	2108      	movs	r1, #8
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <Runfsm_Setting+0x274>)
 8000b16:	f000 ffc8 	bl	8001aaa <HAL_GPIO_TogglePin>
				setTimer(3, 250);
 8000b1a:	21fa      	movs	r1, #250	; 0xfa
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 fc3f 	bl	80013a0 <setTimer>
			}
			break;
 8000b22:	e023      	b.n	8000b6c <Runfsm_Setting+0x26c>
		case check:
			if((Redtime != 0) && (Redtime == Yellowtime + Greentime)){
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <Runfsm_Setting+0x280>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d013      	beq.n	8000b54 <Runfsm_Setting+0x254>
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Runfsm_Setting+0x284>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <Runfsm_Setting+0x288>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	441a      	add	r2, r3
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <Runfsm_Setting+0x280>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d10a      	bne.n	8000b54 <Runfsm_Setting+0x254>
				SETTING = -1;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <Runfsm_Setting+0x27c>)
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	601a      	str	r2, [r3, #0]
				AUTOLINE1 = initAuto;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <Runfsm_Setting+0x294>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
				Setting = 0;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <Runfsm_Setting+0x278>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
				return;
 8000b52:	e00c      	b.n	8000b6e <Runfsm_Setting+0x26e>
			}
			SETTING = initSetting;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <Runfsm_Setting+0x27c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
			break;
 8000b5a:	e008      	b.n	8000b6e <Runfsm_Setting+0x26e>
	if(Manual == 1) return;
 8000b5c:	bf00      	nop
 8000b5e:	e006      	b.n	8000b6e <Runfsm_Setting+0x26e>
		default:
			break;
 8000b60:	bf00      	nop
 8000b62:	e004      	b.n	8000b6e <Runfsm_Setting+0x26e>
			break;
 8000b64:	bf00      	nop
 8000b66:	e002      	b.n	8000b6e <Runfsm_Setting+0x26e>
			break;
 8000b68:	bf00      	nop
 8000b6a:	e000      	b.n	8000b6e <Runfsm_Setting+0x26e>
			break;
 8000b6c:	bf00      	nop
	}
}
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000094 	.word	0x20000094
 8000b74:	40010800 	.word	0x40010800
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000038 	.word	0x20000038
 8000b84:	2000003c 	.word	0x2000003c
 8000b88:	20000040 	.word	0x20000040
 8000b8c:	10624dd3 	.word	0x10624dd3
 8000b90:	2000011c 	.word	0x2000011c
 8000b94:	20000088 	.word	0x20000088

08000b98 <Scan7SEG>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Scan7SEG(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	4832      	ldr	r0, [pc, #200]	; (8000c6c <Scan7SEG+0xd4>)
 8000ba4:	f000 ff69 	bl	8001a7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <Scan7SEG+0xd4>)
 8000bb0:	f000 ff63 	bl	8001a7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bba:	482c      	ldr	r0, [pc, #176]	; (8000c6c <Scan7SEG+0xd4>)
 8000bbc:	f000 ff5d 	bl	8001a7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	4829      	ldr	r0, [pc, #164]	; (8000c6c <Scan7SEG+0xd4>)
 8000bc8:	f000 ff57 	bl	8001a7a <HAL_GPIO_WritePin>
	switch(led_index){
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <Scan7SEG+0xd8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d83b      	bhi.n	8000c4c <Scan7SEG+0xb4>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <Scan7SEG+0x44>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000c05 	.word	0x08000c05
 8000be4:	08000c1d 	.word	0x08000c1d
 8000be8:	08000c35 	.word	0x08000c35
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <Scan7SEG+0xd4>)
 8000bf4:	f000 ff41 	bl	8001a7a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <Scan7SEG+0xdc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f83b 	bl	8000c78 <display7SEG>
			break;
 8000c02:	e024      	b.n	8000c4e <Scan7SEG+0xb6>
		case 1:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	4818      	ldr	r0, [pc, #96]	; (8000c6c <Scan7SEG+0xd4>)
 8000c0c:	f000 ff35 	bl	8001a7a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <Scan7SEG+0xdc>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f82f 	bl	8000c78 <display7SEG>
			break;
 8000c1a:	e018      	b.n	8000c4e <Scan7SEG+0xb6>
		case 2:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <Scan7SEG+0xd4>)
 8000c24:	f000 ff29 	bl	8001a7a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <Scan7SEG+0xdc>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f823 	bl	8000c78 <display7SEG>
			break;
 8000c32:	e00c      	b.n	8000c4e <Scan7SEG+0xb6>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <Scan7SEG+0xd4>)
 8000c3c:	f000 ff1d 	bl	8001a7a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <Scan7SEG+0xdc>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f817 	bl	8000c78 <display7SEG>
			break;
 8000c4a:	e000      	b.n	8000c4e <Scan7SEG+0xb6>
		default:
			break;
 8000c4c:	bf00      	nop
	}
	if((++led_index) >= 4) led_index = 0;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <Scan7SEG+0xd8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <Scan7SEG+0xd8>)
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <Scan7SEG+0xd8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	dd02      	ble.n	8000c66 <Scan7SEG+0xce>
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <Scan7SEG+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	200000a8 	.word	0x200000a8
 8000c74:	20000098 	.word	0x20000098

08000c78 <display7SEG>:
void display7SEG(int num){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	f200 819e 	bhi.w	8000fc4 <display7SEG+0x34c>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <display7SEG+0x18>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000cb9 	.word	0x08000cb9
 8000c94:	08000d07 	.word	0x08000d07
 8000c98:	08000d55 	.word	0x08000d55
 8000c9c:	08000da3 	.word	0x08000da3
 8000ca0:	08000df1 	.word	0x08000df1
 8000ca4:	08000e3f 	.word	0x08000e3f
 8000ca8:	08000e8d 	.word	0x08000e8d
 8000cac:	08000edb 	.word	0x08000edb
 8000cb0:	08000f29 	.word	0x08000f29
 8000cb4:	08000f77 	.word	0x08000f77
	switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2110      	movs	r1, #16
 8000cbc:	48c4      	ldr	r0, [pc, #784]	; (8000fd0 <display7SEG+0x358>)
 8000cbe:	f000 fedc 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	48c2      	ldr	r0, [pc, #776]	; (8000fd0 <display7SEG+0x358>)
 8000cc8:	f000 fed7 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	48bf      	ldr	r0, [pc, #764]	; (8000fd0 <display7SEG+0x358>)
 8000cd2:	f000 fed2 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	48bd      	ldr	r0, [pc, #756]	; (8000fd0 <display7SEG+0x358>)
 8000cdc:	f000 fecd 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce6:	48ba      	ldr	r0, [pc, #744]	; (8000fd0 <display7SEG+0x358>)
 8000ce8:	f000 fec7 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf2:	48b7      	ldr	r0, [pc, #732]	; (8000fd0 <display7SEG+0x358>)
 8000cf4:	f000 fec1 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cfe:	48b4      	ldr	r0, [pc, #720]	; (8000fd0 <display7SEG+0x358>)
 8000d00:	f000 febb 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000d04:	e15f      	b.n	8000fc6 <display7SEG+0x34e>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2110      	movs	r1, #16
 8000d0a:	48b1      	ldr	r0, [pc, #708]	; (8000fd0 <display7SEG+0x358>)
 8000d0c:	f000 feb5 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2120      	movs	r1, #32
 8000d14:	48ae      	ldr	r0, [pc, #696]	; (8000fd0 <display7SEG+0x358>)
 8000d16:	f000 feb0 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	48ac      	ldr	r0, [pc, #688]	; (8000fd0 <display7SEG+0x358>)
 8000d20:	f000 feab 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	48a9      	ldr	r0, [pc, #676]	; (8000fd0 <display7SEG+0x358>)
 8000d2a:	f000 fea6 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	48a6      	ldr	r0, [pc, #664]	; (8000fd0 <display7SEG+0x358>)
 8000d36:	f000 fea0 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d40:	48a3      	ldr	r0, [pc, #652]	; (8000fd0 <display7SEG+0x358>)
 8000d42:	f000 fe9a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4c:	48a0      	ldr	r0, [pc, #640]	; (8000fd0 <display7SEG+0x358>)
 8000d4e:	f000 fe94 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000d52:	e138      	b.n	8000fc6 <display7SEG+0x34e>
		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2110      	movs	r1, #16
 8000d58:	489d      	ldr	r0, [pc, #628]	; (8000fd0 <display7SEG+0x358>)
 8000d5a:	f000 fe8e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	489b      	ldr	r0, [pc, #620]	; (8000fd0 <display7SEG+0x358>)
 8000d64:	f000 fe89 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4898      	ldr	r0, [pc, #608]	; (8000fd0 <display7SEG+0x358>)
 8000d6e:	f000 fe84 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4896      	ldr	r0, [pc, #600]	; (8000fd0 <display7SEG+0x358>)
 8000d78:	f000 fe7f 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d82:	4893      	ldr	r0, [pc, #588]	; (8000fd0 <display7SEG+0x358>)
 8000d84:	f000 fe79 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	4890      	ldr	r0, [pc, #576]	; (8000fd0 <display7SEG+0x358>)
 8000d90:	f000 fe73 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9a:	488d      	ldr	r0, [pc, #564]	; (8000fd0 <display7SEG+0x358>)
 8000d9c:	f000 fe6d 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000da0:	e111      	b.n	8000fc6 <display7SEG+0x34e>
		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2110      	movs	r1, #16
 8000da6:	488a      	ldr	r0, [pc, #552]	; (8000fd0 <display7SEG+0x358>)
 8000da8:	f000 fe67 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	4887      	ldr	r0, [pc, #540]	; (8000fd0 <display7SEG+0x358>)
 8000db2:	f000 fe62 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2140      	movs	r1, #64	; 0x40
 8000dba:	4885      	ldr	r0, [pc, #532]	; (8000fd0 <display7SEG+0x358>)
 8000dbc:	f000 fe5d 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	4882      	ldr	r0, [pc, #520]	; (8000fd0 <display7SEG+0x358>)
 8000dc6:	f000 fe58 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	487f      	ldr	r0, [pc, #508]	; (8000fd0 <display7SEG+0x358>)
 8000dd2:	f000 fe52 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ddc:	487c      	ldr	r0, [pc, #496]	; (8000fd0 <display7SEG+0x358>)
 8000dde:	f000 fe4c 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	4879      	ldr	r0, [pc, #484]	; (8000fd0 <display7SEG+0x358>)
 8000dea:	f000 fe46 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000dee:	e0ea      	b.n	8000fc6 <display7SEG+0x34e>
		case 4:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	4876      	ldr	r0, [pc, #472]	; (8000fd0 <display7SEG+0x358>)
 8000df6:	f000 fe40 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4874      	ldr	r0, [pc, #464]	; (8000fd0 <display7SEG+0x358>)
 8000e00:	f000 fe3b 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4871      	ldr	r0, [pc, #452]	; (8000fd0 <display7SEG+0x358>)
 8000e0a:	f000 fe36 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	486f      	ldr	r0, [pc, #444]	; (8000fd0 <display7SEG+0x358>)
 8000e14:	f000 fe31 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	486c      	ldr	r0, [pc, #432]	; (8000fd0 <display7SEG+0x358>)
 8000e20:	f000 fe2b 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2a:	4869      	ldr	r0, [pc, #420]	; (8000fd0 <display7SEG+0x358>)
 8000e2c:	f000 fe25 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	4866      	ldr	r0, [pc, #408]	; (8000fd0 <display7SEG+0x358>)
 8000e38:	f000 fe1f 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000e3c:	e0c3      	b.n	8000fc6 <display7SEG+0x34e>
		case 5:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	4863      	ldr	r0, [pc, #396]	; (8000fd0 <display7SEG+0x358>)
 8000e44:	f000 fe19 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4860      	ldr	r0, [pc, #384]	; (8000fd0 <display7SEG+0x358>)
 8000e4e:	f000 fe14 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	485e      	ldr	r0, [pc, #376]	; (8000fd0 <display7SEG+0x358>)
 8000e58:	f000 fe0f 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	485b      	ldr	r0, [pc, #364]	; (8000fd0 <display7SEG+0x358>)
 8000e62:	f000 fe0a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4858      	ldr	r0, [pc, #352]	; (8000fd0 <display7SEG+0x358>)
 8000e6e:	f000 fe04 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e78:	4855      	ldr	r0, [pc, #340]	; (8000fd0 <display7SEG+0x358>)
 8000e7a:	f000 fdfe 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e84:	4852      	ldr	r0, [pc, #328]	; (8000fd0 <display7SEG+0x358>)
 8000e86:	f000 fdf8 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000e8a:	e09c      	b.n	8000fc6 <display7SEG+0x34e>
		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	484f      	ldr	r0, [pc, #316]	; (8000fd0 <display7SEG+0x358>)
 8000e92:	f000 fdf2 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	484d      	ldr	r0, [pc, #308]	; (8000fd0 <display7SEG+0x358>)
 8000e9c:	f000 fded 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	484a      	ldr	r0, [pc, #296]	; (8000fd0 <display7SEG+0x358>)
 8000ea6:	f000 fde8 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4848      	ldr	r0, [pc, #288]	; (8000fd0 <display7SEG+0x358>)
 8000eb0:	f000 fde3 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	4845      	ldr	r0, [pc, #276]	; (8000fd0 <display7SEG+0x358>)
 8000ebc:	f000 fddd 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	4842      	ldr	r0, [pc, #264]	; (8000fd0 <display7SEG+0x358>)
 8000ec8:	f000 fdd7 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	483f      	ldr	r0, [pc, #252]	; (8000fd0 <display7SEG+0x358>)
 8000ed4:	f000 fdd1 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000ed8:	e075      	b.n	8000fc6 <display7SEG+0x34e>
		case 7:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	483c      	ldr	r0, [pc, #240]	; (8000fd0 <display7SEG+0x358>)
 8000ee0:	f000 fdcb 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	4839      	ldr	r0, [pc, #228]	; (8000fd0 <display7SEG+0x358>)
 8000eea:	f000 fdc6 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	4837      	ldr	r0, [pc, #220]	; (8000fd0 <display7SEG+0x358>)
 8000ef4:	f000 fdc1 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	4834      	ldr	r0, [pc, #208]	; (8000fd0 <display7SEG+0x358>)
 8000efe:	f000 fdbc 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f08:	4831      	ldr	r0, [pc, #196]	; (8000fd0 <display7SEG+0x358>)
 8000f0a:	f000 fdb6 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f14:	482e      	ldr	r0, [pc, #184]	; (8000fd0 <display7SEG+0x358>)
 8000f16:	f000 fdb0 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f20:	482b      	ldr	r0, [pc, #172]	; (8000fd0 <display7SEG+0x358>)
 8000f22:	f000 fdaa 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000f26:	e04e      	b.n	8000fc6 <display7SEG+0x34e>
		case 8:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <display7SEG+0x358>)
 8000f2e:	f000 fda4 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2120      	movs	r1, #32
 8000f36:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <display7SEG+0x358>)
 8000f38:	f000 fd9f 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <display7SEG+0x358>)
 8000f42:	f000 fd9a 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <display7SEG+0x358>)
 8000f4c:	f000 fd95 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <display7SEG+0x358>)
 8000f58:	f000 fd8f 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <display7SEG+0x358>)
 8000f64:	f000 fd89 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <display7SEG+0x358>)
 8000f70:	f000 fd83 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000f74:	e027      	b.n	8000fc6 <display7SEG+0x34e>
		case 9:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <display7SEG+0x358>)
 8000f7c:	f000 fd7d 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <display7SEG+0x358>)
 8000f86:	f000 fd78 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <display7SEG+0x358>)
 8000f90:	f000 fd73 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <display7SEG+0x358>)
 8000f9a:	f000 fd6e 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <display7SEG+0x358>)
 8000fa6:	f000 fd68 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <display7SEG+0x358>)
 8000fb2:	f000 fd62 	bl	8001a7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <display7SEG+0x358>)
 8000fbe:	f000 fd5c 	bl	8001a7a <HAL_GPIO_WritePin>
			break;
 8000fc2:	e000      	b.n	8000fc6 <display7SEG+0x34e>
		default:
			break;
 8000fc4:	bf00      	nop
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <updateClockBuffer+0x70>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1092      	asrs	r2, r2, #2
 8000fe8:	17db      	asrs	r3, r3, #31
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <updateClockBuffer+0x74>)
 8000fee:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <updateClockBuffer+0x70>)
 8000ff4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ff8:	109a      	asrs	r2, r3, #2
 8000ffa:	17cb      	asrs	r3, r1, #31
 8000ffc:	1ad2      	subs	r2, r2, r3
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	1aca      	subs	r2, r1, r3
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <updateClockBuffer+0x74>)
 800100a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <updateClockBuffer+0x70>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1092      	asrs	r2, r2, #2
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <updateClockBuffer+0x74>)
 800101c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 800101e:	6839      	ldr	r1, [r7, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <updateClockBuffer+0x70>)
 8001022:	fb83 2301 	smull	r2, r3, r3, r1
 8001026:	109a      	asrs	r2, r3, #2
 8001028:	17cb      	asrs	r3, r1, #31
 800102a:	1ad2      	subs	r2, r2, r3
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	1aca      	subs	r2, r1, r3
 8001036:	4b04      	ldr	r3, [pc, #16]	; (8001048 <updateClockBuffer+0x74>)
 8001038:	60da      	str	r2, [r3, #12]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	66666667 	.word	0x66666667
 8001048:	20000098 	.word	0x20000098

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001050:	f000 fa12 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f810 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 f896 	bl	8001188 <MX_GPIO_Init>
  MX_TIM2_Init();
 800105c:	f000 f848 	bl	80010f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <main+0x28>)
 8001062:	f001 f967 	bl	8002334 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Runfsm_Auto();
 8001066:	f7ff f98d 	bl	8000384 <Runfsm_Auto>
	  Runfsm_Manual();
 800106a:	f7ff fb89 	bl	8000780 <Runfsm_Manual>
	  Runfsm_Setting();
 800106e:	f7ff fc47 	bl	8000900 <Runfsm_Setting>
	  Runfsm_Auto();
 8001072:	e7f8      	b.n	8001066 <main+0x1a>
 8001074:	200000ac 	.word	0x200000ac

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b090      	sub	sp, #64	; 0x40
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	2228      	movs	r2, #40	; 0x28
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fd04 	bl	8002a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a2:	2310      	movs	r3, #16
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fd14 	bl	8001adc <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ba:	f000 f8dd 	bl	8001278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 ff80 	bl	8001fdc <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010e2:	f000 f8c9 	bl	8001278 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3740      	adds	r7, #64	; 0x40
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_TIM2_Init+0x94>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_TIM2_Init+0x94>)
 8001116:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800111a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_TIM2_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <MX_TIM2_Init+0x94>)
 8001124:	2209      	movs	r2, #9
 8001126:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_TIM2_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <MX_TIM2_Init+0x94>)
 8001136:	f001 f8ad 	bl	8002294 <HAL_TIM_Base_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001140:	f000 f89a 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4619      	mov	r1, r3
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_TIM2_Init+0x94>)
 8001152:	f001 fa2b 	bl	80025ac <HAL_TIM_ConfigClockSource>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800115c:	f000 f88c 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_TIM2_Init+0x94>)
 800116e:	f001 fc03 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001178:	f000 f87e 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000ac 	.word	0x200000ac

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_GPIO_Init+0xb8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_GPIO_Init+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|LED_RED_Pin
 80011cc:	2200      	movs	r2, #0
 80011ce:	f24f 11ee 	movw	r1, #61934	; 0xf1ee
 80011d2:	481c      	ldr	r0, [pc, #112]	; (8001244 <MX_GPIO_Init+0xbc>)
 80011d4:	f000 fc51 	bl	8001a7a <HAL_GPIO_WritePin>
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80011de:	481a      	ldr	r0, [pc, #104]	; (8001248 <MX_GPIO_Init+0xc0>)
 80011e0:	f000 fc4b 	bl	8001a7a <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin LED_RED_Pin
                           RED0_Pin YELLOW0_Pin GREEN0_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|LED_RED_Pin
 80011e4:	f24f 13ee 	movw	r3, #61934	; 0xf1ee
 80011e8:	60bb      	str	r3, [r7, #8]
                          |RED0_Pin|YELLOW0_Pin|GREEN0_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_GPIO_Init+0xbc>)
 80011fe:	f000 faab 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8001202:	2307      	movs	r3, #7
 8001204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_GPIO_Init+0xc0>)
 8001216:	f000 fa9f 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 800121a:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800121e:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2302      	movs	r3, #2
 800122a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_GPIO_Init+0xc0>)
 8001234:	f000 fa90 	bl	8001758 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	getbuttoninput();
 8001254:	f7fe ff7a 	bl	800014c <getbuttoninput>
	TimerRun(0);
 8001258:	2000      	movs	r0, #0
 800125a:	f000 f8bf 	bl	80013dc <TimerRun>
	TimerRun(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 f8bc 	bl	80013dc <TimerRun>
	TimerRun(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f000 f8b9 	bl	80013dc <TimerRun>
	TimerRun(3);
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f8b6 	bl	80013dc <TimerRun>
//	TimerRun(5);
//	TimerRun(6);
//	TimerRun(7);
//	TimerRun(8);
//	TimerRun(9);
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_MspInit+0x5c>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_MspInit+0x5c>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	61d3      	str	r3, [r2, #28]
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_MspInit+0x60>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_MspInit+0x60>)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f8:	d113      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_TIM_Base_MspInit+0x44>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	; (800132c <HAL_TIM_Base_MspInit+0x44>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_TIM_Base_MspInit+0x44>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201c      	movs	r0, #28
 8001318:	f000 f9e7 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131c:	201c      	movs	r0, #28
 800131e:	f000 fa00 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f8c5 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM2_IRQHandler+0x10>)
 8001386:	f001 f821 	bl	80023cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000ac 	.word	0x200000ac

08001394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <setTimer>:

int timer_flag[Size];
int timer_counter[Size];
int Cycle = 10;

void setTimer(int index, int duration){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / Cycle;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <setTimer+0x30>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	fb92 f2f3 	sdiv	r2, r2, r3
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <setTimer+0x34>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <setTimer+0x38>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2100      	movs	r1, #0
 80013c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000048 	.word	0x20000048
 80013d4:	200000f4 	.word	0x200000f4
 80013d8:	2000011c 	.word	0x2000011c

080013dc <TimerRun>:

void TimerRun(int index){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] > 0){
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <TimerRun+0x48>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd13      	ble.n	8001418 <TimerRun+0x3c>
		timer_counter[index]--;
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <TimerRun+0x48>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <TimerRun+0x48>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0){
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <TimerRun+0x48>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dc04      	bgt.n	8001418 <TimerRun+0x3c>
			timer_flag[index] = 1;
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <TimerRun+0x4c>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2101      	movs	r1, #1
 8001414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200000f4 	.word	0x200000f4
 8001428:	2000011c 	.word	0x2000011c

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff ffb2 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001432:	490c      	ldr	r1, [pc, #48]	; (8001464 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001448:	4c09      	ldr	r4, [pc, #36]	; (8001470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 faf9 	bl	8002a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fdf7 	bl	800104c <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001468:	08002ae8 	.word	0x08002ae8
  ldr r2, =_sbss
 800146c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001470:	20000148 	.word	0x20000148

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f923 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fef6 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f93b 	bl	800173e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f903 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000044 	.word	0x20000044
 80014fc:	20000050 	.word	0x20000050
 8001500:	2000004c 	.word	0x2000004c

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000050 	.word	0x20000050
 8001524:	20000144 	.word	0x20000144

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000144 	.word	0x20000144

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4906      	ldr	r1, [pc, #24]	; (80015d4 <__NVIC_EnableIRQ+0x34>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff90 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff2d 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff42 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff90 	bl	800162c <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5f 	bl	80015d8 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff35 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b08b      	sub	sp, #44	; 0x2c
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e148      	b.n	80019fe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800176c:	2201      	movs	r2, #1
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8137 	bne.w	80019f8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4aa3      	ldr	r2, [pc, #652]	; (8001a1c <HAL_GPIO_Init+0x2c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 8001794:	4aa1      	ldr	r2, [pc, #644]	; (8001a1c <HAL_GPIO_Init+0x2c4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d875      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 800179a:	4aa1      	ldr	r2, [pc, #644]	; (8001a20 <HAL_GPIO_Init+0x2c8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d058      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017a0:	4a9f      	ldr	r2, [pc, #636]	; (8001a20 <HAL_GPIO_Init+0x2c8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d86f      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017a6:	4a9f      	ldr	r2, [pc, #636]	; (8001a24 <HAL_GPIO_Init+0x2cc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d052      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017ac:	4a9d      	ldr	r2, [pc, #628]	; (8001a24 <HAL_GPIO_Init+0x2cc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d869      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017b2:	4a9d      	ldr	r2, [pc, #628]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d04c      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017b8:	4a9b      	ldr	r2, [pc, #620]	; (8001a28 <HAL_GPIO_Init+0x2d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d863      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017be:	4a9b      	ldr	r2, [pc, #620]	; (8001a2c <HAL_GPIO_Init+0x2d4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d046      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
 80017c4:	4a99      	ldr	r2, [pc, #612]	; (8001a2c <HAL_GPIO_Init+0x2d4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d85d      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d82a      	bhi.n	8001824 <HAL_GPIO_Init+0xcc>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d859      	bhi.n	8001886 <HAL_GPIO_Init+0x12e>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <HAL_GPIO_Init+0x80>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	08001853 	.word	0x08001853
 80017dc:	0800182d 	.word	0x0800182d
 80017e0:	0800183f 	.word	0x0800183f
 80017e4:	08001881 	.word	0x08001881
 80017e8:	08001887 	.word	0x08001887
 80017ec:	08001887 	.word	0x08001887
 80017f0:	08001887 	.word	0x08001887
 80017f4:	08001887 	.word	0x08001887
 80017f8:	08001887 	.word	0x08001887
 80017fc:	08001887 	.word	0x08001887
 8001800:	08001887 	.word	0x08001887
 8001804:	08001887 	.word	0x08001887
 8001808:	08001887 	.word	0x08001887
 800180c:	08001887 	.word	0x08001887
 8001810:	08001887 	.word	0x08001887
 8001814:	08001887 	.word	0x08001887
 8001818:	08001887 	.word	0x08001887
 800181c:	08001835 	.word	0x08001835
 8001820:	08001849 	.word	0x08001849
 8001824:	4a82      	ldr	r2, [pc, #520]	; (8001a30 <HAL_GPIO_Init+0x2d8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182a:	e02c      	b.n	8001886 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e029      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	3304      	adds	r3, #4
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e024      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	3308      	adds	r3, #8
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e01f      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	330c      	adds	r3, #12
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e01a      	b.n	8001888 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185a:	2304      	movs	r3, #4
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e013      	b.n	8001888 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001868:	2308      	movs	r3, #8
 800186a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	611a      	str	r2, [r3, #16]
          break;
 8001872:	e009      	b.n	8001888 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	615a      	str	r2, [r3, #20]
          break;
 800187e:	e003      	b.n	8001888 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
          break;
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x130>
          break;
 8001886:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2bff      	cmp	r3, #255	; 0xff
 800188c:	d801      	bhi.n	8001892 <HAL_GPIO_Init+0x13a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	e001      	b.n	8001896 <HAL_GPIO_Init+0x13e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3304      	adds	r3, #4
 8001896:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	; 0xff
 800189c:	d802      	bhi.n	80018a4 <HAL_GPIO_Init+0x14c>
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	e002      	b.n	80018aa <HAL_GPIO_Init+0x152>
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	3b08      	subs	r3, #8
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	210f      	movs	r1, #15
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8090 	beq.w	80019f8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_GPIO_Init+0x2dc>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	4a55      	ldr	r2, [pc, #340]	; (8001a34 <HAL_GPIO_Init+0x2dc>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6193      	str	r3, [r2, #24]
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x2dc>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x2e0>)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <HAL_GPIO_Init+0x2e4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_GPIO_Init+0x2e8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1dc>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_GPIO_Init+0x2ec>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1d8>
 800192c:	2302      	movs	r3, #2
 800192e:	e004      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001930:	2303      	movs	r3, #3
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_GPIO_Init+0x1e2>
 8001938:	2300      	movs	r3, #0
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	f002 0203 	and.w	r2, r2, #3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4093      	lsls	r3, r2
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194a:	493b      	ldr	r1, [pc, #236]	; (8001a38 <HAL_GPIO_Init+0x2e0>)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4937      	ldr	r1, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	4933      	ldr	r1, [pc, #204]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 800197c:	4013      	ands	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	492d      	ldr	r1, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4929      	ldr	r1, [pc, #164]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4923      	ldr	r1, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	491f      	ldr	r1, [pc, #124]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4919      	ldr	r1, [pc, #100]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4915      	ldr	r1, [pc, #84]	; (8001a48 <HAL_GPIO_Init+0x2f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f47f aeaf 	bne.w	800176c <HAL_GPIO_Init+0x14>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	372c      	adds	r7, #44	; 0x2c
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	10320000 	.word	0x10320000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10220000 	.word	0x10220000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	807b      	strh	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8a:	787b      	ldrb	r3, [r7, #1]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a90:	887a      	ldrh	r2, [r7, #2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a96:	e003      	b.n	8001aa0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	041a      	lsls	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001abc:	887a      	ldrh	r2, [r7, #2]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	400b      	ands	r3, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e26c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afc:	4b92      	ldr	r3, [pc, #584]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d00c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b08:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
 8001b14:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d10b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d06c      	beq.n	8001c08 <HAL_RCC_OscConfig+0x12c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d168      	bne.n	8001c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e246      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x76>
 8001b44:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a7f      	ldr	r2, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e02e      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b78      	ldr	r3, [pc, #480]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a77      	ldr	r2, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e01d      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0xbc>
 8001b7e:	4b72      	ldr	r3, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xd4>
 8001b98:	4b6b      	ldr	r3, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a67      	ldr	r2, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d013      	beq.n	8001be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fcb6 	bl	8001528 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fcb2 	bl	8001528 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1fa      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xe4>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fca2 	bl	8001528 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fc9e 	bl	8001528 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1e6      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x10c>
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d063      	beq.n	8001cde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c16:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d11c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
 8001c2e:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d116      	bne.n	8001c68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e1ba      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4939      	ldr	r1, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fc57 	bl	8001528 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fc53 	bl	8001528 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e19b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x270>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fc36 	bl	8001528 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc32 	bl	8001528 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e17a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03a      	beq.n	8001d60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d019      	beq.n	8001d26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fc16 	bl	8001528 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fc12 	bl	8001528 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e15a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f000 fa9a 	bl	8002258 <RCC_Delay>
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fbfc 	bl	8001528 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d32:	e00f      	b.n	8001d54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fbf8 	bl	8001528 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d908      	bls.n	8001d54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e140      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	42420000 	.word	0x42420000
 8001d50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b9e      	ldr	r3, [pc, #632]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e9      	bne.n	8001d34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80a6 	beq.w	8001eba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b97      	ldr	r3, [pc, #604]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10d      	bne.n	8001d9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a93      	ldr	r2, [pc, #588]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9a:	4b8e      	ldr	r3, [pc, #568]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d118      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da6:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8a      	ldr	r2, [pc, #552]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db2:	f7ff fbb9 	bl	8001528 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dba:	f7ff fbb5 	bl	8001528 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e0fd      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x4f8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001de0:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a7a      	ldr	r2, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e02d      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x334>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a72      	ldr	r2, [pc, #456]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	e01c      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x356>
 8001e18:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a6c      	ldr	r2, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e00b      	b.n	8001e4a <HAL_RCC_OscConfig+0x36e>
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b64      	ldr	r3, [pc, #400]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a63      	ldr	r2, [pc, #396]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fb69 	bl	8001528 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fb65 	bl	8001528 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e0ab      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ee      	beq.n	8001e5a <HAL_RCC_OscConfig+0x37e>
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb53 	bl	8001528 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fb4f 	bl	8001528 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e095      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ee      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d105      	bne.n	8001eba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a47      	ldr	r2, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8081 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec4:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d061      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d146      	bne.n	8001f66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb23 	bl	8001528 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fb1f 	bl	8001528 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e067      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	492d      	ldr	r1, [pc, #180]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a19      	ldr	r1, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	430b      	orrs	r3, r1
 8001f32:	4927      	ldr	r1, [pc, #156]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff faf3 	bl	8001528 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff faef 	bl	8001528 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e037      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
 8001f64:	e02f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_RCC_OscConfig+0x4fc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fadc 	bl	8001528 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f74:	f7ff fad8 	bl	8001528 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e020      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x498>
 8001f92:	e018      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e013      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	42420060 	.word	0x42420060

08001fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0d0      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b67      	ldr	r3, [pc, #412]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4965      	ldr	r1, [pc, #404]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b63      	ldr	r3, [pc, #396]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0b8      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a58      	ldr	r2, [pc, #352]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800205a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	494d      	ldr	r1, [pc, #308]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d040      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4936      	ldr	r1, [pc, #216]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff fa2c 	bl	8001528 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff fa28 	bl	8001528 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e053      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e032      	b.n	8002192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4916      	ldr	r1, [pc, #88]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f98a 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08002abc 	.word	0x08002abc
 80021a8:	20000044 	.word	0x20000044
 80021ac:	2000004c 	.word	0x2000004c

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x30>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x36>
 80021de:	e027      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e027      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0c5b      	lsrs	r3, r3, #17
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	fb02 f203 	mul.w	r2, r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e004      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	693b      	ldr	r3, [r7, #16]
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	007a1200 	.word	0x007a1200
 800224c:	08002acc 	.word	0x08002acc
 8002250:	08002adc 	.word	0x08002adc
 8002254:	003d0900 	.word	0x003d0900

08002258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RCC_Delay+0x34>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <RCC_Delay+0x38>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002274:	bf00      	nop
  }
  while (Delay --);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	60fa      	str	r2, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <RCC_Delay+0x1c>
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000044 	.word	0x20000044
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e041      	b.n	800232a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff f814 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f000 fa56 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e035      	b.n	80023b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_TIM_Base_Start_IT+0x90>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_TIM_Base_Start_IT+0x4e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d004      	beq.n	8002382 <HAL_TIM_Base_Start_IT+0x4e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_TIM_Base_Start_IT+0x94>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d010      	beq.n	80023b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	e007      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400

080023cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f998 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f98b 	bl	800273a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f99a 	bl	800275e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0204 	mvn.w	r2, #4
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f972 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f965 	bl	800273a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f974 	bl	800275e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d020      	beq.n	80024c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f94c 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f93f 	bl	800273a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f94e 	bl	800275e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d020      	beq.n	8002514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f926 	bl	800274c <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f919 	bl	800273a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f928 	bl	800275e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0201 	mvn.w	r2, #1
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fe8a 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa6f 	bl	8002a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8f8 	bl	8002770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0220 	mvn.w	r2, #32
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa42 	bl	8002a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_TIM_ConfigClockSource+0x1c>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0b4      	b.n	8002732 <HAL_TIM_ConfigClockSource+0x186>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002600:	d03e      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xd4>
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	f200 8087 	bhi.w	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	f000 8086 	beq.w	800271e <HAL_TIM_ConfigClockSource+0x172>
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d87f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d01a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0xa6>
 800261c:	2b70      	cmp	r3, #112	; 0x70
 800261e:	d87b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d050      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002624:	2b60      	cmp	r3, #96	; 0x60
 8002626:	d877      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d03c      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xfa>
 800262c:	2b50      	cmp	r3, #80	; 0x50
 800262e:	d873      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d058      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d86f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d064      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	2b30      	cmp	r3, #48	; 0x30
 800263e:	d86b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d060      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 8002644:	2b20      	cmp	r3, #32
 8002646:	d867      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05c      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 800264c:	2b10      	cmp	r3, #16
 800264e:	d05a      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15a>
 8002650:	e062      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f000 f96a 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
      break;
 800267e:	e04f      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f000 f953 	bl	800293a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a2:	609a      	str	r2, [r3, #8]
      break;
 80026a4:	e03c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 f8ca 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2150      	movs	r1, #80	; 0x50
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f921 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026c4:	e02c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f000 f8e8 	bl	80028a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2160      	movs	r1, #96	; 0x60
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f911 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 80026e4:	e01c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f000 f8aa 	bl	800284c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2140      	movs	r1, #64	; 0x40
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f901 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002704:	e00c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f000 f8f8 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002716:	e003      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800271e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <TIM_Base_SetConfig+0xc0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d007      	beq.n	80027ac <TIM_Base_SetConfig+0x28>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d003      	beq.n	80027ac <TIM_Base_SetConfig+0x28>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a28      	ldr	r2, [pc, #160]	; (8002848 <TIM_Base_SetConfig+0xc4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <TIM_Base_SetConfig+0xc0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x52>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <TIM_Base_SetConfig+0xc4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <TIM_Base_SetConfig+0xc0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f023 0201 	bic.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
  }
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40012c00 	.word	0x40012c00
 8002848:	40000400 	.word	0x40000400

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f023 0210 	bic.w	r2, r3, #16
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e041      	b.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d004      	beq.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10c      	bne.n	8002a02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40000400 	.word	0x40000400

08002a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <__libc_init_array>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2600      	movs	r6, #0
 8002a50:	4d0c      	ldr	r5, [pc, #48]	; (8002a84 <__libc_init_array+0x38>)
 8002a52:	4c0d      	ldr	r4, [pc, #52]	; (8002a88 <__libc_init_array+0x3c>)
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	42a6      	cmp	r6, r4
 8002a5a:	d109      	bne.n	8002a70 <__libc_init_array+0x24>
 8002a5c:	f000 f822 	bl	8002aa4 <_init>
 8002a60:	2600      	movs	r6, #0
 8002a62:	4d0a      	ldr	r5, [pc, #40]	; (8002a8c <__libc_init_array+0x40>)
 8002a64:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <__libc_init_array+0x44>)
 8002a66:	1b64      	subs	r4, r4, r5
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	42a6      	cmp	r6, r4
 8002a6c:	d105      	bne.n	8002a7a <__libc_init_array+0x2e>
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a74:	4798      	blx	r3
 8002a76:	3601      	adds	r6, #1
 8002a78:	e7ee      	b.n	8002a58 <__libc_init_array+0xc>
 8002a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7e:	4798      	blx	r3
 8002a80:	3601      	adds	r6, #1
 8002a82:	e7f2      	b.n	8002a6a <__libc_init_array+0x1e>
 8002a84:	08002ae0 	.word	0x08002ae0
 8002a88:	08002ae0 	.word	0x08002ae0
 8002a8c:	08002ae0 	.word	0x08002ae0
 8002a90:	08002ae4 	.word	0x08002ae4

08002a94 <memset>:
 8002a94:	4603      	mov	r3, r0
 8002a96:	4402      	add	r2, r0
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d100      	bne.n	8002a9e <memset+0xa>
 8002a9c:	4770      	bx	lr
 8002a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002aa2:	e7f9      	b.n	8002a98 <memset+0x4>

08002aa4 <_init>:
 8002aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa6:	bf00      	nop
 8002aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aaa:	bc08      	pop	{r3}
 8002aac:	469e      	mov	lr, r3
 8002aae:	4770      	bx	lr

08002ab0 <_fini>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr
